# SPDX-FileCopyrightText: 2024-2025 JWP Consulting GK
# SPDX-License-Identifier: AGPL-3.0-or-later
name: Initialize nix docker build
inputs:
    build_target:
        required: true
    package_name:
        required: true
    username:
        required: true
    password:
        required: true
runs:
    using: "composite"
    steps:
        # https://github.com/nix-community/cache-nix-action?tab=readme-ov-file#comparison-with-alternative-approaches
        - uses: nixbuild/nix-quick-install-action@v30
          with:
            nix_conf: |
              keep-env-derivations = true
              keep-outputs = true

        - name: Restore and save Nix store
          uses: nix-community/cache-nix-action@v6
          with:
            # restore and save a cache using this key
            primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
            # if there's no cache hit, restore a cache by this prefix
            restore-prefixes-first-match: nix-${{ runner.os }}-
            # collect garbage until the Nix store size (in bytes) is at most this number
            # before trying to save a new cache
            # 1G = 1073741824
            gc-max-store-size-linux: 1G
            # do purge caches
            purge: true
            # except any version with the key that is the same as the `primary-key`
            purge-primary-key: never
        - uses: DeterminateSystems/flake-checker-action@v8
        - name: Build image streamer
          run: nix build --out-link result.bash ${{ inputs.build_target }}
          shell: bash
        - name: Authenticate with skopeo if main branch
          run: nix run .#skopeo -- login --username=${{ inputs.username }} --password='${{ inputs.password }}' ghcr.io
          shell: bash
          if: ${{ github.ref_name == 'main' }}
        - name: Push with skopeo if main branch
          run: bash result.bash | nix run .#skopeo -- copy docker-archive:/dev/stdin docker://ghcr.io/${{ github.repository }}/${{ inputs.package_name }}
          shell: bash
          if: ${{ github.ref_name == 'main' }}
